From 38a3dd5ee0efcc1b7a3601012d605983b89d4ba3 Mon Sep 17 00:00:00 2001
From: Alejandro del Castillo <alejandro.delcastillo@ni.com>
Date: Mon, 13 Jan 2020 17:19:56 -0600
Subject: [PATCH 2/2] libsolv_solver_execute_transaction: treat obsolete
 operations as upgrades

When the Replace/Conflict pattern is used to split a package [1], opkg is
configuring libsolv to return replace operations in two steps. This
works well for a package that is split in 2, but falls apart when a
package is split into more than 2 packages. Insted, instruct libsolv to
treat OBSOLETE operations as upgrades.

[1] https://www.debian.org/doc/debian-policy/ch-relationships.html

Signed-off-by: Alejandro del Castillo <alejandro.delcastillo@ni.com>

Upstream-status: Submitted
---
 libopkg/solvers/libsolv/opkg_solver_libsolv.c | 45 +++++++----
 tests/Makefile                                |  1 +
 tests/regress/issue50a.py                     | 78 +++++++++++++++++++
 3 files changed, 108 insertions(+), 16 deletions(-)
 create mode 100755 tests/regress/issue50a.py

diff --git a/libopkg/solvers/libsolv/opkg_solver_libsolv.c b/libopkg/solvers/libsolv/opkg_solver_libsolv.c
index d00611132c4eeac08351d04dfb784bab67564088..8e769b110237ca12ba76c1ce65b84ce4e49d601f 100644
--- a/libopkg/solvers/libsolv/opkg_solver_libsolv.c
+++ b/libopkg/solvers/libsolv/opkg_solver_libsolv.c
@@ -862,7 +862,8 @@ static int libsolv_solver_transaction_preamble(libsolv_solver_t *libsolv_solver,
         Id typeId = transaction_type(transaction, stepId,
                 SOLVER_TRANSACTION_SHOW_ACTIVE |
                 SOLVER_TRANSACTION_CHANGE_IS_REINSTALL |
-                SOLVER_TRANSACTION_SHOW_OBSOLETES);
+                SOLVER_TRANSACTION_SHOW_OBSOLETES |
+                SOLVER_TRANSACTION_OBSOLETE_IS_UPGRADE);
 
         const char *pkg_name = pool_id2str(libsolv_solver->pool, solvable->name);
         const char *evr = pool_id2str(libsolv_solver->pool, solvable->evr);
@@ -909,10 +910,11 @@ static int libsolv_solver_execute_transaction(libsolv_solver_t *libsolv_solver)
             Id typeId = transaction_type(transaction, stepId,
                     SOLVER_TRANSACTION_SHOW_ACTIVE |
                     SOLVER_TRANSACTION_CHANGE_IS_REINSTALL |
-                    SOLVER_TRANSACTION_SHOW_OBSOLETES);
+                    SOLVER_TRANSACTION_SHOW_OBSOLETES |
+                    SOLVER_TRANSACTION_OBSOLETE_IS_UPGRADE);
 
             pkg = pkgs->pkgs[i];
-            pkg_t *old, *obs = NULL;
+            pkg_t *old = NULL, *obs = NULL;
 
             Id decision_rule;
 
@@ -924,15 +926,6 @@ static int libsolv_solver_execute_transaction(libsolv_solver_t *libsolv_solver)
                     goto CLEANUP;
                 }
                 break;
-            case SOLVER_TRANSACTION_OBSOLETES:
-                /* Replaces operations are expressed in two steps: the first one is a SOLVER_TRANSACTION_OBSOLETES, with the name of
-                 * the replacer package. The second one is a SOLVER_TRANSACTION_IGNORE, with the name of the replacee */
-                obs = pkgs->pkgs[i + 1];
-                ret = opkg_remove_pkg(obs);
-                if (ret) {
-                    err = -1;
-                    goto CLEANUP;
-                }
             case SOLVER_TRANSACTION_DOWNGRADE:
             case SOLVER_TRANSACTION_REINSTALL:
             case SOLVER_TRANSACTION_INSTALL:
@@ -960,7 +953,27 @@ static int libsolv_solver_execute_transaction(libsolv_solver_t *libsolv_solver)
                 }
                 break;
             case SOLVER_TRANSACTION_UPGRADE:
-                old = pkg_hash_fetch_installed_by_name(pkg->name);
+                  /* An upgrade due to a package obsoleting another one (SOLVER_TRANSACTION_OBSOLETE_IS_UPGRADE)
+                   * will show as an upgrade operation (new pkg) AND a ignore operation (old package)   */
+                  if ((i+1) < transaction->steps.count) {
+                    Id nextStepId = transaction->steps.elements[i+1];
+                    Id nextTypeId = transaction_type(transaction, nextStepId,
+                        SOLVER_TRANSACTION_SHOW_ACTIVE |
+                        SOLVER_TRANSACTION_CHANGE_IS_REINSTALL |
+                        SOLVER_TRANSACTION_SHOW_OBSOLETES |
+                        SOLVER_TRANSACTION_OBSOLETE_IS_UPGRADE);
+
+                   if (nextTypeId == SOLVER_TRANSACTION_IGNORE) {
+                        obs = pkgs->pkgs[i+1];
+                        old = pkg_hash_fetch_installed_by_name(obs->name);
+                    }
+                }
+
+                /* If this is not an OBSOLETE operation, check to see if there is an older pkg installed */
+                if (!obs) {
+                    old = pkg_hash_fetch_installed_by_name(pkg->name);
+                }
+
                 /* if an old version was found set the new package's
                    autoinstalled status to that of the old package. */
                 if (old) {
@@ -972,8 +985,8 @@ static int libsolv_solver_execute_transaction(libsolv_solver_t *libsolv_solver)
                     if (!opkg_config->download_only) {
                         char *old_version = pkg_version_str_alloc(old);
 
-                        opkg_message(NOTICE, "Upgrading %s from %s to %s on %s\n",
-                                     pkg->name, old_version, pkg->version, pkg->dest->name);
+                        opkg_message(NOTICE, "Upgrading %s (%s) to %s (%s) on %s\n",
+                                     old->name, old_version, pkg->name, pkg->version, pkg->dest->name);
                         free(old_version);
                     }
                 } else {
@@ -985,7 +998,7 @@ static int libsolv_solver_execute_transaction(libsolv_solver_t *libsolv_solver)
                     }
                 }
 
-                ret = opkg_install_pkg(pkg, NULL);
+                ret = opkg_install_pkg(pkg, old);
                 if (ret) {
                     err = -1;
                     goto CLEANUP;
diff --git a/tests/Makefile b/tests/Makefile
index b043dcab949b021f2432c3f3e62d27c2af988db6..4b059288ca3af145d7afa27adabe1960d4ed3fed 100644
--- a/tests/Makefile
+++ b/tests/Makefile
@@ -49,6 +49,7 @@ REGRESSION_TESTS := core/01_install.py \
 		    regress/issue45.py \
 		    regress/issue46.py \
 		    regress/issue50.py \
+		    regress/issue50a.py \
 		    regress/issue51.py \
 		    regress/issue55.py \
 		    regress/issue58.py \
diff --git a/tests/regress/issue50a.py b/tests/regress/issue50a.py
new file mode 100755
index 0000000000000000000000000000000000000000..a6b4ac6c99cb89acb1912e60cdae36960bd1dfef
--- /dev/null
+++ b/tests/regress/issue50a.py
@@ -0,0 +1,78 @@
+#! /usr/bin/env python3
+#
+# Verifies that a package split into 3 subpackages can be upgraded correctly
+#
+# What steps will reproduce the problem?
+# ======================================
+#
+# 1. Create package a version 1, containing files /foo and /foo1.
+# 2. Create package a version 2, without files /foo and /foo1, depending on packages a & b
+# 3. Create package b version 1, containing file /foo which Conflicts/Replaces  a (<< 2.0)
+# 4. Create package c version 1, containing file /foo1 which Conflicts/Replaces  a (<< 2.0)
+# 5. Create package repository containing a_2,  b_1 and c_1.
+# 6. Install a_1 manually.
+# 7. opkg update; opkg upgrade
+#
+#
+# What is the expected output? What do you see instead?
+# =====================================================
+#
+# Files /foo & /foo1 are expected to exist and be provided by packages b and c.
+#
+#
+
+import os
+import opk, cfg, opkgcl
+
+opk.regress_init()
+
+open("foo", "w").close()
+open("foo1", "w").close()
+a1 = opk.Opk(Package="a", Version="1.0")
+a1.write(data_files=["foo", "foo1"])
+
+opkgcl.install("a_1.0_all.opk")
+
+o = opk.OpkGroup()
+a2 = opk.Opk(Package="a", Version="2.0", Depends="b,c")
+a2.write()
+b1 = opk.Opk(Package="b", Version="1.0", Conflicts="a (<< 2.0)", Replaces="a (<< 2.0)")
+b1.write(data_files=["foo"])
+c1 = opk.Opk(Package="c", Version="1.0", Conflicts="a (<< 2.0)", Replaces="a (<< 2.0)")
+c1.write(data_files=["foo1"])
+o.opk_list.append(a2)
+o.opk_list.append(b1)
+o.opk_list.append(c1)
+o.write_list()
+
+os.unlink("foo")
+
+opkgcl.update()
+status = opkgcl.upgrade("a")
+
+if status != 0:
+        opk.fail("Upgrade operation failed (Return value was different than 0)")
+
+if not opkgcl.is_installed("a", "2.0"):
+	opk.fail("Package 'a_2.0' not installed.")
+
+foo_fullpath = "{}/foo".format(cfg.offline_root)
+
+if not os.path.exists(foo_fullpath):
+	opk.fail("File 'foo' incorrectly orphaned.")
+
+if not foo_fullpath in opkgcl.files("b"):
+	opk.fail("Package 'b' does not own file 'foo'.")
+
+foo1_fullpath = "{}/foo1".format(cfg.offline_root)
+
+if not os.path.exists(foo1_fullpath):
+	opk.fail("File 'foo1' incorrectly orphaned.")
+
+if not foo1_fullpath in opkgcl.files("c"):
+	opk.fail("Package 'c' does not own file 'foo'.")
+
+
+opkgcl.remove("a")
+opkgcl.remove("b")
+opkgcl.remove("c")
-- 
2.25.0.rc2

